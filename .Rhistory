install.packages("swirl")
library(swirl)
library(swirl)
install_course("Advanced R Programming")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
submit(x)
skip()
boring_function('My first function!')
boring_function()
boring_function
#
# Hint #3: The mean of all the numbers in a vector is equal to the sum of all of
#		   the numbers in the vector divided by the size of the vector.
#
# Note for those of you feeling super clever: Please do not use the mean()
# function while writing this function. We're trying to teach you something
# here!
#
# Be sure to save this script and type submit() in the console after you make
# your changes.
my_vector
my_mean <- function(my_vector) {
sum(c(1, 2, 3))/ength(c(1, 2, 3))
}
my_mean
submit()
submit()
submit()
submit()
skip()
my_mean(c(4,5,10))
install.packages(c("colorspace", "lubridate", "magrittr", "raster", "rprojroot", "rstudioapi", "vctrs", "waldo"))
install.packages(c("cli", "pillar"))
install.packages(c("CreditMetrics", "creditmodel", "CreditRisk", "copula"))
install.packages("rlang")
qnorm(.19)
qnorm(.19/100)
qnorm(1-.0005)
install.packages(c("scorecard", "scorecardModelUtils"))
updateR()
library(installr)
install.packages("installr")
library(installr)
updateR()
install.packages("gh")
install.packages("processx")
install.packages(c("isoband", "lme4", "processx"))
library(installr)
updateR()
q()
q()
q()
install.packages(c("car", "gamlss.data", "glue", "gsl", "jrvFinance", "lmtest", "mclust", "nloptr", "RcppArmadillo"))
library(installr)
download.file("https://github.com/RamiKrispin/coronavirus/raw/master/data/coronavirus.rda", destfile = "cvirus")
load("cvirus")
View(coronavirus)
RNGkind(sample.kind=”Rounding”)
RNGkind(sample.kind="Rounding")
library(quantmod)
wilsh <- getSymbols("WILL5000IND",src="FRED“,auto.assign=FALSE)
wilsh <- na.omit(wilsh)
wilsh <- wilsh[“1979-12-31/2017-12-31”]
names(wilsh) <- “TR”
wilsh <- getSymbols("WILL5000IND",src="FRED",auto.assign=FALSE)
library(quantmod)
wilsh <- getSymbols("WILL5000IND", src="FRED", auto.assign=FALSE)
wilsh <- na.omit(wilsh)
wilsh <- wilsh[“1979-12-31/2017-12-31”]
wilsh <- wilsh["1979-12-31/2017-12-31"]
names(wilsh) <- "TR"
head(wilsh, 3)
tail(wilsh, 3)
View(wilsh)
gold <- getSymbols("GOLDPMGBD228NLBM", src="FRED", auto.assign=FALSE)
gold <- na.omit(gold)
gold <- wilsh["1979-12-31/2017-12-31"]
names(gold) <- "TR"
head(gold, 3)
tail(gold, 3)
gold <- getSymbols("GOLDPMGBD228NLBM", src="FRED", auto.assign=FALSE)
gold <- na.omit(gold)
gold <- wilsh["1979-12-31/2017-12-31"]
names(gold) <- "TR"
head(gold, 3)
tail(gold, 3)
gold <- getSymbols("GOLDPMGBD228NLBM", src="FRED", auto.assign=FALSE)
gold <- na.omit(gold)
gold <- gold["1979-12-31/2017-12-31"]
names(gold) <- "TR"
head(gold, 3)
tail(gold, 3)
> logret_w <- apply.weekly(wilsh,sum)
logret_w <- apply.weekly(wilsh,sum)
round(head(logret_w,3),6)
ret_w <- exp(logret_w)-1
exchange <- getSymbols("DEXJPUS", src="FRED", auto.assign=FALSE)
exchange <- na.omit(exchange)
exchange <- exchange["1979-12-31/2017-12-31"]
names(exchange) <- "TR"
head(exchange, 3)
tail(exchange, 3)
logret_w <- apply.weekly(exchange,sum)
round(head(logret_w,3),6)
install.packages(c("corrplot", "DT", "gamlss.dist", "gert", "gsl", "igraph", "mlr3", "mlr3misc", "mstate", "nloptr", "readr", "rsample", "rsconnect", "servr", "sf", "shiny.semantic", "slam", "sp", "terra", "tibble", "timetk", "tseries", "V8", "vroom", "xgboost"))
install.packages(c("dataPreparation", "git2r", "parallelly", "rgl", "rio", "xaringanthemer", "xgboost"))
install.packages(c("imputeTS", "VIM"))
library(imputeTS)
library(tidyverse)
library(VIM)
ch1_train = read.csv("C:/Users/shubh/Desktop/Challenge 1/Train.csv")
ch1_train_linearinterpol = imputeTS::na_interpolation(ch1_train$Transactions, option = "linear")
install.packages("pracma")
library(pracma)
install.packages("spatialEco")
library(spacialEco)
library(spacialEco)
library(spatialEco)
ch1_train_polynomialinterpol = spatialEco::poly.regression(ch1_train$Transactions, s = 0.2, impute = T, na.only = T)
ch1_train_spline = imputeTS::na_interpolation(ch1_train$Transactions, option = "spline")
ch1_train_ma = imputeTS::na_ma(ch1_train$Transactions, k = 4)
ch1_train_kalmansmoothing = imputeTS::na_kalman(ch1_train$Transactions, model = 'StructTS')
ch1_train_knn = VIM::kNN(ch1_train, variable = 'Transactions', k = 5)
ch1_train_linearinterpol = imputeTS::na_interpolation(ch1_train, option = "linear")
View(ch1_train_knn)
View(ch1_train_linearinterpol)
ch1_train_polynomialinterpol = spatialEco::poly.regression(ch1_train, s = 0.2, impute = T, na.only = T)
ch1_train_polynomialinterpol
ch1_train_ma = imputeTS::na_ma(ch1_train, k = 4)
View(ch1_train_ma)
ch1_train_kalmansmoothing = imputeTS::na_kalman(ch1_train, model = 'StructTS')
View(ch1_train_kalmansmoothing)
View(ch1_train_knn)
ch1_train_kalmansmoothing$Transactions = round(ch1_train_kalmansmoothing$Transactions,0)
View(ch1_train_kalmansmoothing)
ch1_train_knn$Transactions = round(ch1_train_knn$Transactions,0)
View(ch1_train_knn)
d=ch1_train_knn[,c(1:12)]
View(d)
getwd()
write.csv(d, "KnnImputedTrain.csv")
ch1_train_kalmansmoothing$Transactions = round(ch1_train_kalmansmoothing$Transactions,0)
write.csv(ch1_train_kalmansmoothing, "KalmanImputedTrain.csv")
library(Amelia)
amelia(ch1_train$Transactions, m = 5, p2s = 1, frontend = FALSE, ...)
amelia(ch1_train, m = 5, p2s = 1, frontend = FALSE, ...)
amelia(ch1_train, m = 5, p2s = 1, frontend = FALSE)
amelia(ch1_train$Transactions, m = 5, p2s = 1, frontend = FALSE)
amelia(ch1_train[,c(1:8,10:12)], m = 5, p2s = 1, frontend = FALSE)
ch1_imputed = amelia(ch1_train[,c(1:8,10:12)], m = 5, p2s = 1, frontend = FALSE)
View(ch1_imputed)
View(ch1_imputed)
install.packages(c("backports", "datamods", "igraph", "Rmixmod", "terra", "yardstick"))
install.packages(c("brio", "cpp11", "credentials", "devtools", "digest", "emmeans", "fabletools", "fs", "ggdist", "glue", "igraph", "kit", "memoise", "odbc", "pkgbuild", "pkgload", "quanteda", "readr", "remotes", "rex", "scorecard", "spatstat.core", "stringi", "strucchangeRcpp", "vroom", "withr", "xml2"))
library(updateR)
train = read.csv("C:/Users/shubh/Desktop/Challenge 1/Imputed Data.csv")
View(train)
library(prophet)
m <- prophet(train)
install.packages(c("backports", "coro", "DataEditR", "dtplyr", "fs", "httpuv", "Matrix", "openxlsx", "pagedown", "pkgbuild", "pracma", "raster", "rbibutils", "Rdpack", "rgeos", "RSQLite", "seer", "sessioninfo", "spatstat.geom", "spatstat.utils", "spdep", "targets", "testthat", "tsibble", "TTR", "usethis", "vitae", "xfun"))
install.packages(c("BH", "dataPreparation", "DBI", "glue", "h2o", "igraph", "knitr", "ks", "mclust", "openssl", "parallelly", "pkgbuild", "progressr", "raster", "RcppArmadillo", "rstan", "sf", "shinyjs", "spatstat.data", "spatstat.sparse", "tinytex", "V8"))
install.packages("PortfolioAnalytics")
devtools::install_github("business-science/portfoliodown")
devtools::install_github("business-science/portfoliodown")
devtools::install_github("business-science/portfoliodown", force = T)
library(portfoliodown)
install.packages(c("glue", "raster", "V8"))
install.packages(c("xaringan", "xaringanthemer"))
updateR()
library(installr)
updateR()
install.packages(c("gert", "wk"))
library(coronavirus)
data("covid19_vaccine")
force(covid19_vaccine)
View(covid19_vaccine)
install.packages(c("broom", "DEoptimR", "echarts4r", "emmeans", "h2o", "highcharter", "htmlTable", "httpuv", "igraph", "multcomp", "RcppParallel", "repr", "spdep", "waiter"))
install.packages(c("h2o", "igraph"))
install.packages(c("carData", "creditmodel", "distributional", "esquisse", "h2o", "igraph", "spam", "tsibbledata"))
install.packages(c("h2o", "igraph"))
remove.packages("igraph", lib="~/R/win-library/4.1")
remotes::install_github("igraph/rigraph@master")
install.packages("igraph")
pkgs <- c("RCurl", "jsonlite", "statmod", "devtools", "roxygen2", "testthat")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) install.packages(pkg)
}
install.packages(c("h2o", "igraph", "rjson", "slam", "targets"))
install.packages(c("fansi", "forecast", "foreign", "ISOcodes", "mlr3measures", "mlr3misc", "modeltime", "nlme", "nnet", "shinyWidgets", "SWIM", "terra"))
install.packages(c("cli", "collapse", "dataprep", "dtplyr", "fansi", "foreign", "grafify", "gratis", "jsonlite", "lightgbm", "mlr3", "mlr3misc", "nlme", "nnet", "Rcpp", "reticulate", "RQuantLib", "terra", "testthat", "timetk"))
devtools::install_github("business-science/portfoliodown")
